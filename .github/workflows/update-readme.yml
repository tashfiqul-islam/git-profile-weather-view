name: Readme Weather Update

# Trigger the workflow every 8 hours and allow manual execution
on:
  schedule:
    - cron: '0 */8 * * *'  # Run every 8 hours
  workflow_dispatch:  # Allow manual trigger of the workflow

jobs:
  update-readme-weather:
    runs-on: ubuntu-latest 

    steps:
      # Step 1: Checkout the weather script repository
      - name: Checkout Weather Script Repository
        uses: actions/checkout@v4  
        with:
          repository: tashfiqul-islam/git-profile-weather-view 
          path: git-profile-weather-view 

      # Step 2: Checkout the personal repository for updating the README
      - name: Checkout Personal Repository
        uses: actions/checkout@v4  
        with:
          repository: tashfiqul-islam/tashfiqul-islam 
          path: tashfiqul-islam  
          token: ${{ secrets.PAT }}  # Use Personal Access Token for authentication

      # Step 3: Cache Node.js dependencies to optimize runtime
      - name: Cache Node.js Dependencies
        uses: actions/cache@v4  
        with:
          path: ~/.npm  
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}  # Unique cache key based on OS and lockfile
          restore-keys: |
            ${{ runner.os }}-node-  # Restore partial matches if exact key is unavailable

      # Step 4: Set up the Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'  # Use the latest Long-Term Support (LTS) version

      # Step 5: Install dependencies for the weather script
      - name: Install Dependencies
        run: npm ci  
        working-directory: ./git-profile-weather-view  

      # Step 6: Execute the weather script to fetch weather data
      - name: Run Weather Script
        run: |
          WEATHER_DATA=$(node src/index.js)  # Execute the script and fetch weather data
          echo "WEATHER_DATA=$WEATHER_DATA" >> $GITHUB_ENV  # Export weather data as an environment variable
        env:
          OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}  # API key for OpenWeatherMap
        working-directory: ./git-profile-weather-view

      # Step 7: Update the README file with the new weather data
      - name: Update README
        run: |
          node src/updateReadme.js "${{ env.WEATHER_DATA }}"  # Pass weather data to the update script
        working-directory: ./git-profile-weather-view

      # Step 8: Install GPG if not already available
      - name: Install GPG
        run: sudo apt-get update && sudo apt-get install -y gnupg  # Ensure GPG is installed on the runner

      # Step 9: Import the GPG private key for signing commits
      - name: Import GPG Key
        run: |
          mkdir -p ~/.gnupg  # Create .gnupg directory
          chmod 700 ~/.gnupg  # Set secure permissions
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | base64 --decode | gpg --batch --import  # Import GPG private key
          echo "use-agent" >> ~/.gnupg/gpg.conf  # Configure GPG to use an agent
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf  # Enforce non-interactive mode
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      # Step 10: Configure Git for commit signing with GPG
      - name: Configure Git
        run: |
          git config --global user.email "${{ secrets.GH_EMAIL }}"  # Configure Git user email
          git config --global user.name "${{ secrets.GH_USERNAME }}"  # Configure Git user name
          git config --global user.signingkey "${{ secrets.GPG_SIGN_KEY }}"  # Configure Git signing key
          git config --global gpg.program $(which gpg)  # Ensure Git uses the installed GPG program
          git config --global commit.gpgsign true  # Enable GPG signing for all commits
        working-directory: ./tashfiqul-islam

      # Step 11: Commit and push changes if the README file was updated
      - name: Commit and Push Changes
        run: |
          export GPG_TTY=$(tty)  
          cd tashfiqul-islam  
          if [ -n "$(git status --porcelain)" ]; then 
            git add README.md  # Stage the updated README file
            git -c gpg.program="gpg --batch --yes --pinentry-mode loopback" \
              commit -S -am "chore(profile-weather-view): Hourly Weather Update"  # Commit changes with GPG signing
            git push origin master  
          else
            echo "No changes to commit" 
          fi
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}  # Provide the passphrase for GPG signing
